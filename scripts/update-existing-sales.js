#!/usr/bin/env node

/**
 * Script de migraci√≥n simple para actualizar ventas existentes
 * Uso: node scripts/update-existing-sales.js
 */

// Cargar variables de entorno desde .env.local
require('dotenv').config({ path: '.env.local' });

const { initializeApp } = require('firebase/app');
const { getFirestore, collection, getDocs, updateDoc, doc, query, where } = require('firebase/firestore');

// Configuraci√≥n de Firebase
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID
};

// Funci√≥n para mapear el estado antiguo a los nuevos estados
function mapOldStateToNewStates(oldEstado) {
  switch (oldEstado) {
    case 'pending':
      return {
        estadoPago: 'pending',
        estadoEnvio: 'pendiente_envio'
      }
    case 'approved':
      return {
        estadoPago: 'approved',
        estadoEnvio: 'pendiente_envio'
      }
    case 'rejected':
      return {
        estadoPago: 'rejected',
        estadoEnvio: 'cancelled'
      }
    case 'cancelled':
      return {
        estadoPago: 'cancelled',
        estadoEnvio: 'cancelled'
      }
    case 'en_preparacion':
      return {
        estadoPago: 'approved',
        estadoEnvio: 'en_preparacion'
      }
    case 'listo_entrega':
      return {
        estadoPago: 'approved',
        estadoEnvio: 'listo_entrega'
      }
    case 'en_camino':
      return {
        estadoPago: 'approved',
        estadoEnvio: 'en_camino'
      }
    case 'entregado':
      return {
        estadoPago: 'approved',
        estadoEnvio: 'entregado'
      }
    default:
      return {
        estadoPago: 'pending',
        estadoEnvio: 'pendiente_envio'
      }
  }
}

// Funci√≥n principal de migraci√≥n
async function migrateSalesStates() {
  console.log('üîÑ Iniciando migraci√≥n de estados de ventas...');
  console.log('');

  try {
    // Verificar configuraci√≥n
    if (!firebaseConfig.apiKey) {
      console.error('‚ùå Error: Variables de entorno de Firebase no encontradas');
      console.log('Aseg√∫rate de tener un archivo .env.local con las variables de Firebase');
      return;
    }

    // Inicializar Firebase
    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    
    // Obtener todas las ventas
    const salesRef = collection(db, 'ventas');
    const salesSnapshot = await getDocs(salesRef);
    
    console.log(`üìä Encontradas ${salesSnapshot.size} ventas para revisar`);
    console.log('');
    
    let migratedCount = 0;
    let skippedCount = 0;
    
    for (const saleDoc of salesSnapshot.docs) {
      const data = saleDoc.data();
      
      // Verificar si ya tiene los nuevos campos
      if (data.estadoPago && data.estadoEnvio) {
        console.log(`‚è≠Ô∏è  Saltando venta ${saleDoc.id} - ya migrada`);
        skippedCount++;
        continue;
      }
      
      // Mapear el estado antiguo a los nuevos estados
      const oldEstado = data.estado || 'pending';
      const newStates = mapOldStateToNewStates(oldEstado);
      
      console.log(`üîÑ Migrando venta ${saleDoc.id}:`);
      console.log(`   Estado anterior: ${oldEstado}`);
      console.log(`   Nuevo estado de pago: ${newStates.estadoPago}`);
      console.log(`   Nuevo estado de env√≠o: ${newStates.estadoEnvio}`);
      
      // Actualizar el documento
      await updateDoc(doc(db, 'ventas', saleDoc.id), {
        estadoPago: newStates.estadoPago,
        estadoEnvio: newStates.estadoEnvio
      });
      
      console.log(`   ‚úÖ Migrada exitosamente`);
      console.log('');
      
      migratedCount++;
    }
    
    console.log('üìà Resumen de migraci√≥n:');
    console.log(`   ‚úÖ Ventas migradas: ${migratedCount}`);
    console.log(`   ‚è≠Ô∏è  Ventas saltadas: ${skippedCount}`);
    console.log(`   üìä Total procesadas: ${migratedCount + skippedCount}`);
    console.log('');
    console.log('üéâ Migraci√≥n completada exitosamente!');
    
  } catch (error) {
    console.error('‚ùå Error durante la migraci√≥n:', error.message);
    console.error('Detalles:', error);
  }
}

// Ejecutar la migraci√≥n
migrateSalesStates();
